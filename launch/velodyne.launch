<!-- Launch file to initialize VLP16 into pointcloud and slice pointcloud into laserscan -->

<launch>
    <!-- Source the kinetic repository and then the catkin_ws -->
    

    <!-- Call file to intialize pointcloud from VLP16 -->
    <include file="$(find velodyne_pointcloud)/launch/VLP16_points.launch"/>

    <!-- Run pointcloud_to_laserscan package to slice up pointcloud -->
    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">
        <remap from="cloud_in" to="/velodyne_points"/>
        <remap from="scan" to="/top/scan"/>
        <rosparam>
            <!-- Include parameters here for later use -->
        </rosparam>
    </node>

    <node pkg="tf" type="static_transform_publisher" name="base_footprint_2_velodyne" args="0 0 0 0 0 0 /base_link /velodyne_points 100"/>

    <param name="pub_map_odom_transform" value="true"/>
    <param name="map_frame" value="map"/>
    <param name="base_frame" value="base_link"/>
    <param name="odom_frame" value="base_link"/>

    <!-- Run hector mapping to take laser_scan and build map -->
    <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" output="screen">
        <rosparam>
            use_tf_scan_transformation: true
            use_tf_pose_start_estimate: false
            base_frame: base_link
            odom_frame: base_link
            pub_map_odom_transform: true
            scan_subscriber_queue_size: 25

            map_resolution: 0.050
            map_size: 2048
            map_start_x: 0.5
            map_start_y: 0.5
            map_multi_res_levels: 2

            update_factor_free: 0.4
            update_factor_occupied: 0.9
            map_update_distance_thresh: 0.0006
            
            advertise_map_service: true
            
            scan_subscriber_queue_size: 5
            scan_topic: top/scan

            tf_map_scanmatch_transform_frame_name: scanmatcher_frame
        </rosparam>
    </node>
</launch>
